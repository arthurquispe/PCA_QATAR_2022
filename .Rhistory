library(nortest)
sort_pesos = sort(pesos)
library(nortest)
ad.test(pesos)
data.frame(sort_pesos)
ad.test(sort_pesos)
datos=c(2.8,2.6,3.4,3.5,3.7,3.3,3.7,3.6,3.4)
shapiro.test(datos)
# 2 --------------------
datos3=c(61,60,63,60,60,59,60,62,61,200,51,68)
library(PMCMRplus)
install.packages("PMCMR")
datos=c(2.8,2.6,3.4,3.5,3.7,3.3,3.7,3.6,3.4)
shapiro.test(datos)
# 2 --------------------
datos3=c(61,60,63,60,60,59,60,62,61,200,51,68)
library(PMCMRplus)
datos=c(2.8,2.6,3.4,3.5,3.7,3.3,3.7,3.6,3.4)
shapiro.test(datos)
# 2 --------------------
datos3=c(61,60,63,60,60,59,60,62,61,200,51,68)
library(PMCMRplus)
library(PMCMRplus)
install.packages("PMCMRplus")
datos=c(2.8,2.6,3.4,3.5,3.7,3.3,3.7,3.6,3.4)
shapiro.test(datos)
# 2 --------------------
datos3=c(61,60,63,60,60,59,60,62,61,200,51,68)
library(PMCMRplus)
grubbsTest(datos3,alternative ="t")
# 3 --------------------
datos3=c(61,60,63,60,60,59,60,62,61,200,51,68)
library(PMCMRplus)
grubbsTest(datos3,alternative ="t")
# 4 --------------------
dato2=
dato2=c(
120,    103,
96,    90,
95,    107,
92,    94,
88,    89,
90,    95,
93,    106,
94,    99,
87,    94,
93,    93)
length(dato2)
library(outliers)
dixon.test(dato2,opposite = T,type = 10)
dixon.test(dato2,opposite = F,type = 10)
# 5 --------------------
datos5=c(
18,
27,
28,
28,
28,
28,
29,
29,
29,
29,
29,
30,
30,
30,
30,
30,
30,
31,
31,
31,
31,
31,
32,
32,
32,
32,
33,
33,
33,
60
)
library(nortest)
ad.test(datos5)
# 6 --------------------
tiempos <- c(16.032,             24.076,
16.463,             21.151,
14.817,             14.702,
27.014,             12.165,
16.597,             21.404,
18.825,             19.364,
18.515,             14.24,
24.154,             19.916,
16.238,             20.795,
25.924,             18.874,
17.532,             16.713,
16.677,             18.739,
14.206,             19.501,
18.59,             18.587,
19.929,             25.354,
12.858,             16.452,
17.487,             22.658,
22.24,             17.471,
16.537,             23.96,
14.417,             18.338,
28.501,             16.939,
17.926,             24.477,
17.673,             22.422,
13.373,             21.971,
20.549,             24.509
)
#rangos
low <- median(tiempos) - 3 * mad(tiempos, constant = 1)
up  <- median(tiempos) + 3 * mad(tiempos, constant = 1)
which(tiempos < low | tiempos > up)
tiempos[which(tiempos < low | tiempos > up)]
serie3=read.delim("clipboard",header = TRUE)
str(serie3)
zt=serie3$Zt
ztst=ts(zt,frequency = 12,start = c(2015,1),end = c(2021,12))
ztst=ts(zt,frequency = 12,start = c(2015,1),end = c(2022,12))
d=decompose(ztst,"additive")
plot(d)
d
serie3 <- read.delim2("clipboard", header = TRUE)
serie3 <- read.delim2("clipboard", header = TRUE)
str(serie3)
serie3$Zt <- as.numeric(serie3$Zt)
friedman.test(serie3$Zt, as.factor(serie3$mes), as.factor(serie3$año))
serie2 = serie3
Rt=rank(serie1$Zt[1:90])
Rt
Rt=rank(serie1$Zt[1:90])
serie2 = serie3
Rt=rank(serie1$Zt[1:90])
serie1 = serie2
Rt=rank(serie1$Zt[1:90])
Rt
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
plot(serie1)
serie1$t <- as.numeric(serie1$t)
serie1$Zt <- as.numeric(serie1$Zt)
regre3 <- lm(Zt ~ t, data = serie1)
summary(regre3)
friedman.test(serie3$Zt, as.factor(serie3$mes), as.factor(serie3$año))
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
View(u_3)
# PREG 7 -----------------------------------------------------------------------
serie3 <- read.delim2("clipboard", header = TRUE)
serie2 = serie3
serie1 = serie2
plot(serie1)
serie1$t <- as.numeric(serie1$t)
serie1$Zt <- as.numeric(serie1$Zt)
regre3 <- lm(Zt ~ t, data = serie1)
regre3
summary(regre3)
Rt=rank(serie1$Zt[1:90])
Rt
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
# PREG 8 -----------------------------------------------------------------------
serie1 = read.delim("clipboard")
serie1
str(serie1)
serie1$Zt = as.numeric(serie1$Zt)
Rt=rank(serie1$Zt[1:90])
Rt
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
cor.test(serie1$t[1:90],Rt,alternative = "two.sided",method = "spearman")
x = (4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
x = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2)
sum(x)
pnorm(-1.8474)
pnorm(-1.4506)
data= read.delim("clipboard")
data
ks.test(data)
data= read.delim("clipboard")
data
ks.test(data)
media <- mean(data)
desv <- sd(data)
media <- mean(data)
desv <- sd(data)
data= read.delim("clipboard")
data
ks.test(data)
data= read.delim("clipboard")
data
media <- mean(data)
desv <- sd(data)
str(data)
data
data= read.delim("clipboard")
str(data)
media <- mean(data)
data$MUESTRA = as.numeric(data$MUESTRA)
media <- mean(data)
data= read.delim("clipboard")
View(data)
data$MUESTRA = as.numeric(data$MUESTRA)
media <- mean(data)
data = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2)
data = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2)
media <- mean(data)
desv <- sd(data)
ks <- ks.test(data, "pnorm", mean = media, sd = desv)
ks
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {
break
}
}
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 10000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {
break
}
}
# P valor ------------------------------
# Parámetros de entrada
D <- 0.0807  # Estadístico KS
n <- 20      # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 10000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {
break
}
}
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val
# Mostrar resultado
cat("p-valor calculado con suma truncada:", p_val, "\n")
# Mostrar resultado
cat("p-valor calculado con suma truncada:", p_val, "\n")
ks
# Mostrar resultado
cat("p-valor calculado con suma truncada:", p_val, "\n")
data = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2,57)
media <- mean(data)
desv <- sd(data)
ks <- ks.test(data, "pnorm", mean = media, sd = desv)
ks
data = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2)
media <- mean(data)
desv <- sd(data)
ks <- ks.test(data, "pnorm", mean = media, sd = desv)
ks
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val;p_val
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {
break
}
}
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val;p_val
D <- 0.0807  # Estadístico KS
n <- 20      # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 1000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {
break
}
}
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val;p_val
data = c(4.3, 5.2, 6.1, 6.4, 6.9, 7.3, 7.5, 7.6, 7.9, 8.1,
8.4, 8.6, 9.0, 9.3, 9.7, 10.2, 10.8, 11.3, 12.0, 13.2)
media <- mean(data)
desv <- sd(data)
ks <- ks.test(data, "pnorm", mean = media, sd = desv)
ks
# P valor ------------------------------
# Parámetros de entrada
D <- 0.0807   # Estadístico KS
n <- 20 # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0max_k <- 1000  # número máximo de términos a considerar
# P valor ------------------------------
# Parámetros de entrada
D <- 0.0807   # Estadístico KS
n <- 20 # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 1000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {    break  }}
# P valor ------------------------------
# Parámetros de entrada
D <- 0.0807   # Estadístico KS
n <- 20 # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 1000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {    break  }}
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val;p_val
data2 = c(1.2, 0.8, 1.0, 0.9, 5.6, 6.1, 5.8, 6.3, 5.9, 6.5,
6.0, 5.7, 5.8, 6.2, 5.9, 6.1, 5.8, 6.0, 6.3, 5.7)
data2 = c(1.2, 0.8, 1.0, 0.9, 5.6, 6.1, 5.8, 6.3, 5.9, 6.5,
6.0, 5.7, 5.8, 6.2, 5.9, 6.1, 5.8, 6.0, 6.3, 5.7)
media2 <- mean(data)
desv2 <- sd(data)
ks2 <- ks.test(data, "pnorm", mean = media, sd = desv)
ks2
media2 <- mean(data2)
desv2 <- sd(data2)
ks2 <- ks.test(data2, "pnorm", mean = media, sd = desv)
ks2
media2 <- mean(data2)
desv2 <- sd(data2)
data2 = c(1.2, 0.8, 1.0, 0.9, 5.6, 6.1, 5.8, 6.3, 5.9, 6.5,
6.0, 5.7, 5.8, 6.2, 5.9, 6.1, 5.8, 6.0, 6.3, 5.7)
media2 <- mean(data2)
desv2 <- sd(data2)
ks2 <- ks.test(data2, "pnorm", mean = media2, sd = desv2)
desv2 <- sd(data2)
data2 = c(1.2, 0.8, 1.0, 0.9, 5.6, 6.1, 5.8, 6.3, 5.9, 6.5,
6.0, 5.7, 5.8, 6.2, 5.9, 6.1, 5.8, 6.0, 6.3, 5.7)
media2 <- mean(data2)
desv2 <- sd(data2)
ks2 <- ks.test(data2, "pnorm", mean = media2, sd = desv2)
data2 = c(1.2, 0.8, 1.0, 0.9, 5.6, 6.1, 5.8, 6.3, 5.9, 6.5,
6.0, 5.7, 5.8, 6.2, 5.9, 6.1, 5.8, 6.0, 6.3, 5.7)
data2
media2 <- mean(data2)
desv2 <- sd(data2)
ks2 <- ks.test(data2, "pnorm", mean = media2, sd = desv2)
ks2
# P valor_2 ------------------------------
# Parámetros de entrada
D <- 0.41784  # Estadístico KS
n <- 20 # Tamaño de muestra
# Inicializar p-valor y número de términos
p_val <- 0
max_k <- 10000  # número máximo de términos a considerar
# Sumar la serie
for (k in 1:max_k) {
termino <- (-1)^(k - 1) * exp(-2 * k^2 * D^2 * n)
p_val <- p_val + termino
# Cortar si el término ya es insignificante
if (abs(termino) < 1e-10) {    break  }}
# Multiplicar por 2 (por la fórmula)
p_val <- 2 * p_val;p_val
ks2
p_val
p_val
serie6=read.delim2("clipboard", header = TRUE)
str(serie6)
serie6=read.delim("clipboard", header = TRUE)
str(serie6)
serie6x=serie6$Zt
VSuavizado = function(x,z1,alfa){
ZT =c()
for (i in 1:length(x)) {
if(x[i]== serie6x[1])  {
ZT[i] = serie6x[1]
}
else{
ZT[i] = alfa*x[i] + (1-alfa)*ZT[i-1]
}
}
print(round(ZT,2))
}
30
sniv=VSuavizado(serie6x,serie6x[1],0.35)
sniv=VSuavizado(serie6x,serie6x[1],0.35)
stend=VSuavizado(sniv,serie6x[1],0.35)
sesta=VSuavizado(stend,serie6x[1],0.35)
sniv=as.vector(sniv)
stend=as.vector(stend)
sesta=as.vector(sesta)
b1t=3*sniv-3*stend+sesta
b2t=(0.35/(2*0.65^2))*((6-5*0.35)*sniv-2*(5-4*0.35)*stend+(4-3*0.35)*sesta)
b3t=(0.35/0.65)^2*(sniv-2*stend+sesta)
zpt=c()
for (i in 2:length(serie6x)) {
zpt[i] = b1t[i-1]+b2t[i-1]+b3t[i-1]
print(zpt[i])
}
library("reshape2")
library("ggplot2")
seriesv6=data.frame(t=1:72,tZt=serie6$Zt,tsescb=zpt)
seriesv6
tses=seriesv6$y
seriesv6=data.frame(t=1:72,tZt=serie6$Zt,tsescb=zpt)
seriesv6
seriesf6=melt(seriesv6, id.vars = "t")
ggplot(seriesf6,
aes(x = t,
y = value,
col = variable)) + geom_line()
for (i in 2:length(serie6x)) {
zpt[i] = b1t[i-1]+b2t[i-1]+b3t[i-1]
print(zpt[i])
}
VSuavizado = function(x,z1,alfa){
ZT =c()
for (i in 1:length(x)) {
if(x[i]== serie6x[1])  {
ZT[i] = serie6x[1]
}
else{
ZT[i] = alfa*x[i] + (1-alfa)*ZT[i-1]
}
}
print(round(ZT,2))
}
30
sniv=VSuavizado(serie6x,serie6x[1],0.35)
stend=VSuavizado(sniv,serie6x[1],0.35)
sesta=VSuavizado(stend,serie6x[1],0.35)
sniv=as.vector(sniv)
stend=as.vector(stend)
sesta=as.vector(sesta)
b1t=3*sniv-3*stend+sesta
b1t=3*sniv-3*stend+sesta
b1t
df1 = read.csv("Fifa_Worldcup_2022_Groups.csv")
rm(list = ls())
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
cat("\014")
options(scipen = 999)
options(digits = 3)
df1 = read.csv("Fifa_Worldcup_2022_Groups.csv")
View(df1)
df1 = read.csv("group_stats.csv")
View(df1)
library(textshape)
install.packages("textshape")
library(textshape)
df2 = df1[!duplicated(df1$team),]
df3 = textshape::column_to_rownames(df2,loc = 1)
View(df3)
df2 = df1[!duplicated(df1$team),]
View(df2)
df3 = textshape::column_to_rownames(df2,loc = 1)
View(df3)
df1$team
df2 = df1[!duplicated(df1$team),]
df2 = df1[!duplicated(df1$team),]
df3 = textshape::column_to_rownames(df2,loc = 1)
View(df3)
df3 = textshape::column_to_rownames(df2$team,loc = 1)
View(df3)
df3 = textshape::column_to_rownames(df2,loc = 1)
View(df3)
df3 = textshape::column_to_rownames(df2,loc = 4)
View(df3)
col(df3)
colnames(df3)
df4 = df3[,-c(1,2,3,4,11,12,13,14,15)]
View(df4)
PCA1 = prcomp(df4,sclae=TRUE)
PCA1 = prcomp(df4,scale=TRUE)
PCA1.names()
install.packages("factoextra")
library(factoextra)
fviz_eig(PCA1)
fviz_pca_biplot(PCA1,
repel = FALSE
)
fviz_pca_biplot(PCA1,
repel = TRUE
)
View(df4)
